{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7504,"status":"ok","timestamp":1661056750734,"user":{"displayName":"이우원","userId":"05495556713808915653"},"user_tz":-540},"id":"r-q6KMwWtQWa","outputId":"21c27c0d-5608-4e32-a48e-8978da58c5d9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow_addons in /usr/local/lib/python3.7/dist-packages (0.17.1)\n","Requirement already satisfied: typeguard>=2.7 in /usr/local/lib/python3.7/dist-packages (from tensorflow_addons) (2.7.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from tensorflow_addons) (21.3)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->tensorflow_addons) (3.0.9)\n","2.8.2\n","True\n","True\n","/device:GPU:0\n"]}],"source":["!pip install tensorflow_addons\n","# !pip install tensorflow==2.8\n","# !apt install --allow-change-held-packages libcudnn8=8.1.0.77-1+cuda11.2\n","\n","import tensorflow as tf\n","print(tf.__version__)\n","print(tf.test.is_built_with_cuda())  # cuda로 빌드되는지 확인\n","print(tf.test.is_built_with_gpu_support())  # cuda와 같은 gpu로 빌드되는지 확인\n","print(tf.test.gpu_device_name())  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2127,"status":"ok","timestamp":1661056752854,"user":{"displayName":"이우원","userId":"05495556713808915653"},"user_tz":-540},"id":"KJCN058SLgyp","outputId":"887d8907-4cc8-4a1f-c0e8-81d0217f0d45"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import tensorflow_addons as tfa\n","import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import numpy as np\n","import cv2\n","import os\n","import random\n","\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras import layers\n","from tensorflow import keras\n","from google.colab import drive\n","from glob import glob\n","\n","from keras import backend as K\n","from keras.utils import io_utils\n","from tensorflow.python.platform import tf_logging as logging\n","\n","drive.mount('/content/drive')\n","os.chdir('/content/drive/MyDrive/Colab Notebooks/collage/segmentation')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"QzZuAuXtwXbe"},"outputs":[],"source":["rs = 1234\n","IMAGE_SIZE = 512\n","BATCH_SIZE = 8\n","NUM_CLASSES = 1\n","\n","def seed_everything(seed):\n","    random.seed(seed)\n","    # os.environ['PYTHONHASHSEED'] = str(seed)\n","    # os.environ['TF_DETERMINISTIC_OPS'] = '1'\n","    np.random.seed(seed)\n","    tf.random.set_seed(seed)\n","seed_everything(rs)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETU20GzMODpD"},"outputs":[],"source":["DATA_DIR = \"/content/drive/MyDrive/Colab Notebooks/collage/segmentation/data/rawdata/\"\n","\n","all_images = sorted(glob(os.path.join(DATA_DIR, \"humanparsing/val/Images/*\"))+glob(os.path.join(DATA_DIR, \"humanparsing/train/Images/*\"))+glob(os.path.join(DATA_DIR, \"fashion/JPEGImages/*\")))\n","all_masks = sorted(glob(os.path.join(DATA_DIR, \"humanparsing/val/Human/*\"))+glob(os.path.join(DATA_DIR, \"humanparsing/train/Human/*\"))+glob(os.path.join(DATA_DIR, \"fashion/SegmentationClassAug/*\")))\n","\n","val_size = 5000\n","train_images, val_images, train_masks, val_masks  = train_test_split(all_images, all_masks, test_size=val_size, random_state=rs)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3709,"status":"ok","timestamp":1661056788845,"user":{"displayName":"이우원","userId":"05495556713808915653"},"user_tz":-540},"id":"5uhIDgL3Lgys","outputId":"a2cea1df-0ed9-4b8e-c487-05f3b171452f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Train Dataset: <BatchDataset element_spec=(TensorSpec(shape=(8, 512, 512, 3), dtype=tf.float32, name=None), TensorSpec(shape=(8, 512, 512, 1), dtype=tf.float32, name=None))>\n","Validation Dataset: <BatchDataset element_spec=(TensorSpec(shape=(8, 512, 512, 3), dtype=tf.float32, name=None), TensorSpec(shape=(8, 512, 512, 1), dtype=tf.float32, name=None))>\n"]}],"source":["def read_image(image_path, mask=False):\n","  image = tf.io.read_file(image_path)\n","  image = tf.image.decode_png(image, channels=3)\n","  image.set_shape([None, None, 3])\n","  image = tf.image.resize(images=image, size=[IMAGE_SIZE, IMAGE_SIZE])\n","  if not mask:\n","      image = image / 255\n","  return image\n","\n","def load_data(image_list, mask_list):\n","  image = read_image(image_list)\n","  mask = read_image(mask_list, mask=True)\n","  return image, mask\n","\n","def random_crop(input_image, real_image, size):\n","  stacked_image = tf.stack([input_image, real_image], axis=0)\n","  cropped_image = tf.image.random_crop(\n","      stacked_image, size=[2, size, size, 3])\n","  img,msk = cropped_image[0], cropped_image[1]\n","  return img,msk\n","\n","def augment(input_image, input_mask):\n","\n","  if tf.random.uniform(()) > 0.3:\n","      ratio = tf.random.uniform(shape=[],minval=400, maxval=440, dtype=tf.int32)\n","      input_image, input_mask = random_crop(input_image, input_mask, ratio)\n","      input_image = tf.image.resize(input_image, (IMAGE_SIZE, IMAGE_SIZE))\n","      input_mask = tf.image.resize(input_mask, (IMAGE_SIZE, IMAGE_SIZE))\n","\n","  input_image = tf.image.random_brightness(input_image, 0.2)\n","\n","  saturation_factor = tf.random.uniform((),0,2)\n","  input_image = tf.image.adjust_saturation(input_image, saturation_factor)\n","\n","  if tf.random.uniform(()) > 0.5:\n","      input_image = tf.image.flip_left_right(input_image)\n","      input_mask = tf.image.flip_left_right(input_mask)\n","\n","  rot_factor = tf.cast(tf.random.uniform(shape=[],minval=-6, maxval=6, dtype=tf.int32), tf.float32)\n","  angle = np.pi/(12*6) *rot_factor\n","  input_image = tfa.image.rotate(input_image, angle)\n","  input_mask = tfa.image.rotate(input_mask, angle)\n","\n","  return input_image, input_mask\n","\n","def cast_mask(input_image, input_mask):\n","  input_mask = tf.math.reduce_sum(input_mask, axis=2)\n","  input_mask = input_mask[..., tf.newaxis]\n","  input_mask = tf.cast(input_mask>0, dtype=tf.float32)\n","  return input_image,input_mask\n","\n","def data_generator(image_list, mask_list, augument=True):\n","  dataset = tf.data.Dataset.from_tensor_slices((image_list, mask_list))\n","  dataset = dataset.map(load_data, num_parallel_calls=tf.data.AUTOTUNE)\n","  if augument:\n","    dataset = dataset.map(augment)\n","  dataset = dataset.map(cast_mask)\n","  dataset = dataset.batch(BATCH_SIZE, drop_remainder=True)\n","  return dataset\n","\n","train_dataset = data_generator(train_images, train_masks)\n","print(\"Train Dataset:\", train_dataset)\n","\n","val_dataset = data_generator(val_images, val_masks, augument=False)\n","print(\"Validation Dataset:\", val_dataset)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mscID--oLgyv"},"outputs":[],"source":["def convolution_block(\n","    block_input,\n","    num_filters=256,\n","    kernel_size=3,\n","    dilation_rate=1,\n","    padding=\"same\",\n","    use_bias=False,\n","):\n","    x = layers.Conv2D(\n","        num_filters,\n","        kernel_size=kernel_size,\n","        dilation_rate=dilation_rate,\n","        padding=\"same\",\n","        use_bias=use_bias,\n","        kernel_initializer=keras.initializers.HeNormal(),\n","    )(block_input)\n","    x = layers.BatchNormalization()(x)\n","    return tf.nn.relu(x)\n","\n","\n","def DilatedSpatialPyramidPooling(dspp_input):\n","    dims = dspp_input.shape\n","    x = layers.AveragePooling2D(pool_size=(dims[-3], dims[-2]))(dspp_input)\n","    x = convolution_block(x, kernel_size=1, use_bias=True)\n","    out_pool = layers.UpSampling2D(\n","        size=(dims[-3] // x.shape[1], dims[-2] // x.shape[2]), interpolation=\"bilinear\",\n","    )(x)\n","\n","    out_1 = convolution_block(dspp_input, kernel_size=1, dilation_rate=1)\n","    out_6 = convolution_block(dspp_input, kernel_size=3, dilation_rate=6)\n","    out_12 = convolution_block(dspp_input, kernel_size=3, dilation_rate=12)\n","    out_18 = convolution_block(dspp_input, kernel_size=3, dilation_rate=18)\n","\n","    x = layers.Concatenate(axis=-1)([out_pool, out_1, out_6, out_12, out_18])\n","    output = convolution_block(x, kernel_size=1)\n","    return output\n","\n","def SE_block(input_tensor, reduction_ratio=8):\n","    ch_input = K.int_shape(input_tensor)[-1]\n","    ch_reduced = ch_input//reduction_ratio  \n","    # Squeeze\n","    x = layers.GlobalAveragePooling2D()(input_tensor)\n","    # Excitation\n","    x = layers.Dense(ch_reduced, kernel_initializer='he_normal', activation='relu', use_bias=False)(x) \n","    x = layers.Dense(ch_input, kernel_initializer='he_normal', activation='sigmoid', use_bias=False)(x)\n","    x = layers.Reshape((1, 1, ch_input))(x)\n","    x = layers.Multiply()([input_tensor, x])\n","    \n","    return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xLGVfa3bLgyz"},"outputs":[],"source":["def DeeplabV3Plus(image_size, num_classes, find_tunebackbone=False):\n","    model_input = keras.Input(shape=(image_size, image_size, 3))\n","    effiucientnetV2M = keras.applications.EfficientNetV2M(\n","        weights=\"imagenet\", include_top=False, input_tensor=model_input\n","    )\n","    if not find_tunebackbone:\n","      for layer in effiucientnetV2M.layers:\n","        if '_bn' not in layer.name:\n","          layer.trainable = False\n","    x = effiucientnetV2M.get_layer(\"block6a_expand_activation\").output\n","    x = DilatedSpatialPyramidPooling(x)\n","    # x = SE_block(x)\n","    input_a = layers.UpSampling2D(\n","        size=(image_size // 4 // x.shape[1], image_size // 4 // x.shape[2]),\n","        interpolation=\"bilinear\",\n","    )(x)\n","    input_b = effiucientnetV2M.get_layer(\"block2e_add\").output\n","    input_b = convolution_block(input_b, num_filters=48, kernel_size=1)\n","\n","    x = layers.Concatenate(axis=-1)([input_a, input_b])\n","    x = convolution_block(x)\n","    x = convolution_block(x)\n","    x = layers.UpSampling2D(\n","        size=(image_size // x.shape[1], image_size // x.shape[2]),\n","        interpolation=\"bilinear\",\n","    )(x)\n","    model_output = layers.Conv2D(num_classes, kernel_size=(1, 1), padding=\"same\", activation='sigmoid')(x)\n","    return keras.Model(inputs=model_input, outputs=model_output)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BCW9gMU7HXjY"},"outputs":[],"source":["class unfreeze_layers_reduce_lr(tf.keras.callbacks.ReduceLROnPlateau):\n","\n","  def __init__(self,\n","               monitor='val_loss',\n","               factor=0.1,\n","               patience=10,\n","               verbose=0,\n","               mode='auto',\n","               min_delta=1e-4,\n","               cooldown=0,\n","               min_lr=0,\n","               freezed=False,\n","               **kwargs):\n","      super().__init__(monitor, factor, patience, verbose, mode, min_delta, cooldown, min_lr)\n","      self.freezed = False\n","\n","\n","  def on_epoch_end(self, epoch, logs=None):\n","    logs = logs or {}\n","    logs['lr'] = K.get_value(self.model.optimizer.lr)\n","    current = logs.get(self.monitor)\n","    if current is None:\n","      logging.warning('Learning rate reduction is conditioned on metric `%s` '\n","                      'which is not available. Available metrics are: %s',\n","                      self.monitor, ','.join(list(logs.keys())))\n","    else:\n","      if self.in_cooldown():\n","        self.cooldown_counter -= 1\n","        self.wait = 0\n","\n","      if self.monitor_op(current, self.best):\n","        self.best = current\n","        self.wait = 0\n","\n","      elif not self.in_cooldown():\n","        self.wait += 1\n","        if self.wait >= self.patience:\n","          \n","          if not self.freezed:\n","            for layer in self.model.layers:\n","                      layer.trainable = True\n","            self.freezed=True\n","            old_lr = K.get_value(self.model.optimizer.lr)\n","            new_lr = old_lr * 0.1\n","            K.set_value(self.model.optimizer.lr, new_lr)\n","            io_utils.print_msg(\n","                    f'\\nEpoch {epoch +1}: '\n","                    f'Unfreezing backbone layers and reducing learning rate to {new_lr}')\n","            self.cooldown_counter = self.cooldown\n","            self.wait = 0\n","\n","          else:\n","            old_lr = K.get_value(self.model.optimizer.lr)\n","            if old_lr > np.float32(self.min_lr):\n","              new_lr = old_lr * self.factor\n","              new_lr = max(new_lr, self.min_lr)\n","              K.set_value(self.model.optimizer.lr, new_lr)\n","              if self.verbose > 0:\n","                io_utils.print_msg(\n","                    f'\\nEpoch {epoch +1}: '\n","                    f'ReduceLROnPlateau reducing learning rate to {new_lr}.')\n","              self.cooldown_counter = self.cooldown\n","              self.wait = 0\n","\n","class CustomSaver(keras.callbacks.Callback):\n","  def __init__(self, save_path, save_name, frequency):\n","    self.save_path = save_path\n","    self.save_name = save_name\n","    self.frequency = frequency\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","      if (epoch+1) % self.frequency == 0 :\n","          name = self.save_path + self.save_name + f'{epoch+1:03d}.h5'\n","          self.model.save(name)\n","          io_utils.print_msg(\n","                    f'\\nEpoch {epoch + 1}:'\n","                    f'saving model to {name}')\n","\n","model_path, model_name = './model_weight/DLv3+adam0.01+unfreeze/', 'adam0.01_epoch_'\n","model_path_best = './model_weight/DLv3+adam0.01+unfreeze/adam0.01.h5'\n","csv_name = './model_weight/DLv3+adam0.01+unfreeze/adam0.01.csv'\n","\n","custom_saver = CustomSaver(model_path, model_name ,frequency=5)\n","reduce_lr = unfreeze_layers_reduce_lr(monitor='val_loss', factor=0.5, patience=4, verbose=1, mode='min', min_delta=1e-4, cooldown=0, min_lr=0.0001,)\n","save_best = tf.keras.callbacks.ModelCheckpoint(model_path_best, monitor='val_loss', verbose=0, save_best_only=True,)\n","write_log = tf.keras.callbacks.CSVLogger(csv_name, separator=',', append=True)\n","\n","cb_list = [custom_saver, reduce_lr, save_best, write_log]"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FpXwPVXzwJur"},"outputs":[],"source":["model = DeeplabV3Plus(image_size=IMAGE_SIZE, num_classes=NUM_CLASSES)\n","# model = tf.keras.models.load_model('/content/drive/MyDrive/Colab Notebooks/collage/segmentation/model_weight/DLv3+adam0.01+unfreezeadam0.01_epoch_020.h5')\n","loss = keras.losses.BinaryCrossentropy()\n","model.compile(\n","    optimizer=keras.optimizers.Adam(learning_rate=0.01),\n","    loss=loss,\n","    metrics=[\"accuracy\", tf.keras.metrics.BinaryIoU(),],\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GJoClIVd5Y9j","outputId":"dc7d43bf-73df-4506-ff2c-59bbb05cfa87"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","5748/5748 [==============================] - 3636s 629ms/step - loss: 0.1491 - accuracy: 0.9408 - binary_io_u: 0.8846 - val_loss: 0.1503 - val_accuracy: 0.9386 - val_binary_io_u: 0.8737 - lr: 0.0100\n","Epoch 2/100\n","5748/5748 [==============================] - 3442s 599ms/step - loss: 0.1216 - accuracy: 0.9521 - binary_io_u: 0.9054 - val_loss: 0.1425 - val_accuracy: 0.9432 - val_binary_io_u: 0.8825 - lr: 0.0100\n","Epoch 3/100\n","5748/5748 [==============================] - 3443s 599ms/step - loss: 0.1116 - accuracy: 0.9558 - binary_io_u: 0.9124 - val_loss: 0.1282 - val_accuracy: 0.9496 - val_binary_io_u: 0.8951 - lr: 0.0100\n","Epoch 4/100\n","5748/5748 [==============================] - 3443s 599ms/step - loss: 0.1036 - accuracy: 0.9589 - binary_io_u: 0.9182 - val_loss: 0.1187 - val_accuracy: 0.9545 - val_binary_io_u: 0.9051 - lr: 0.0100\n","Epoch 5/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0945 - accuracy: 0.9624 - binary_io_u: 0.9249\n","Epoch 5:saving model to ./model_weight/DLv3+adam0.01+unfreeze/adam0.01_epoch_005.h5\n","5748/5748 [==============================] - 3436s 598ms/step - loss: 0.0945 - accuracy: 0.9624 - binary_io_u: 0.9249 - val_loss: 0.1227 - val_accuracy: 0.9541 - val_binary_io_u: 0.9039 - lr: 0.0100\n","Epoch 6/100\n","5748/5748 [==============================] - 3432s 597ms/step - loss: 0.0850 - accuracy: 0.9662 - binary_io_u: 0.9323 - val_loss: 0.1176 - val_accuracy: 0.9580 - val_binary_io_u: 0.9122 - lr: 0.0100\n","Epoch 7/100\n","5748/5748 [==============================] - 3431s 597ms/step - loss: 0.0757 - accuracy: 0.9700 - binary_io_u: 0.9396 - val_loss: 0.1265 - val_accuracy: 0.9548 - val_binary_io_u: 0.9056 - lr: 0.0100\n","Epoch 8/100\n","5748/5748 [==============================] - 3430s 597ms/step - loss: 0.0679 - accuracy: 0.9732 - binary_io_u: 0.9459 - val_loss: 0.1253 - val_accuracy: 0.9570 - val_binary_io_u: 0.9104 - lr: 0.0100\n","Epoch 9/100\n","5748/5748 [==============================] - 3429s 596ms/step - loss: 0.0625 - accuracy: 0.9754 - binary_io_u: 0.9502 - val_loss: 0.1257 - val_accuracy: 0.9580 - val_binary_io_u: 0.9123 - lr: 0.0100\n","Epoch 10/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0582 - accuracy: 0.9772 - binary_io_u: 0.9537\n","Epoch 10:saving model to ./model_weight/DLv3+adam0.01+unfreeze/adam0.01_epoch_010.h5\n","\n","Epoch 10: Unfreezing backbone layers and reducing learning rate to 0.0009999999776482583\n","5748/5748 [==============================] - 3431s 597ms/step - loss: 0.0582 - accuracy: 0.9772 - binary_io_u: 0.9537 - val_loss: 0.1305 - val_accuracy: 0.9581 - val_binary_io_u: 0.9126 - lr: 0.0100\n","Epoch 11/100\n","5748/5748 [==============================] - 3430s 597ms/step - loss: 0.0560 - accuracy: 0.9779 - binary_io_u: 0.9552 - val_loss: 0.1251 - val_accuracy: 0.9609 - val_binary_io_u: 0.9182 - lr: 1.0000e-03\n","Epoch 12/100\n","5748/5748 [==============================] - 3430s 597ms/step - loss: 0.0499 - accuracy: 0.9805 - binary_io_u: 0.9602 - val_loss: 0.1327 - val_accuracy: 0.9607 - val_binary_io_u: 0.9179 - lr: 1.0000e-03\n","Epoch 13/100\n","5748/5748 [==============================] - 3430s 597ms/step - loss: 0.0469 - accuracy: 0.9817 - binary_io_u: 0.9627 - val_loss: 0.1391 - val_accuracy: 0.9606 - val_binary_io_u: 0.9177 - lr: 1.0000e-03\n","Epoch 14/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0447 - accuracy: 0.9826 - binary_io_u: 0.9645\n","Epoch 14: ReduceLROnPlateau reducing learning rate to 0.0004999999655410647.\n","5748/5748 [==============================] - 3432s 597ms/step - loss: 0.0447 - accuracy: 0.9826 - binary_io_u: 0.9645 - val_loss: 0.1448 - val_accuracy: 0.9605 - val_binary_io_u: 0.9174 - lr: 1.0000e-03\n","Epoch 15/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0434 - accuracy: 0.9831 - binary_io_u: 0.9655\n","Epoch 15:saving model to ./model_weight/DLv3+adam0.01+unfreeze/adam0.01_epoch_015.h5\n","5748/5748 [==============================] - 3431s 597ms/step - loss: 0.0434 - accuracy: 0.9831 - binary_io_u: 0.9655 - val_loss: 0.1505 - val_accuracy: 0.9606 - val_binary_io_u: 0.9175 - lr: 5.0000e-04\n","Epoch 16/100\n","5748/5748 [==============================] - 3431s 597ms/step - loss: 0.0424 - accuracy: 0.9835 - binary_io_u: 0.9663 - val_loss: 0.1533 - val_accuracy: 0.9605 - val_binary_io_u: 0.9174 - lr: 5.0000e-04\n","Epoch 17/100\n","5748/5748 [==============================] - 3431s 597ms/step - loss: 0.0416 - accuracy: 0.9838 - binary_io_u: 0.9670 - val_loss: 0.1560 - val_accuracy: 0.9605 - val_binary_io_u: 0.9173 - lr: 5.0000e-04\n","Epoch 18/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0409 - accuracy: 0.9841 - binary_io_u: 0.9675\n","Epoch 18: ReduceLROnPlateau reducing learning rate to 0.00024999998277053237.\n","5748/5748 [==============================] - 3432s 597ms/step - loss: 0.0409 - accuracy: 0.9841 - binary_io_u: 0.9675 - val_loss: 0.1587 - val_accuracy: 0.9604 - val_binary_io_u: 0.9172 - lr: 5.0000e-04\n","Epoch 19/100\n","5748/5748 [==============================] - 3433s 597ms/step - loss: 0.0404 - accuracy: 0.9843 - binary_io_u: 0.9679 - val_loss: 0.1613 - val_accuracy: 0.9605 - val_binary_io_u: 0.9174 - lr: 2.5000e-04\n","Epoch 20/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0400 - accuracy: 0.9845 - binary_io_u: 0.9682\n","Epoch 20:saving model to ./model_weight/DLv3+adam0.01+unfreeze/adam0.01_epoch_020.h5\n","5748/5748 [==============================] - 3435s 598ms/step - loss: 0.0400 - accuracy: 0.9845 - binary_io_u: 0.9682 - val_loss: 0.1628 - val_accuracy: 0.9604 - val_binary_io_u: 0.9173 - lr: 2.5000e-04\n","Epoch 21/100\n","5748/5748 [==============================] - 3434s 597ms/step - loss: 0.0396 - accuracy: 0.9846 - binary_io_u: 0.9685 - val_loss: 0.1641 - val_accuracy: 0.9604 - val_binary_io_u: 0.9172 - lr: 2.5000e-04\n","Epoch 22/100\n","5748/5748 [==============================] - ETA: 0s - loss: 0.0393 - accuracy: 0.9847 - binary_io_u: 0.9688\n","Epoch 22: ReduceLROnPlateau reducing learning rate to 0.00012499999138526618.\n","5748/5748 [==============================] - 3437s 598ms/step - loss: 0.0393 - accuracy: 0.9847 - binary_io_u: 0.9688 - val_loss: 0.1654 - val_accuracy: 0.9604 - val_binary_io_u: 0.9172 - lr: 2.5000e-04\n","Epoch 23/100\n","5748/5748 [==============================] - 3435s 598ms/step - loss: 0.0391 - accuracy: 0.9848 - binary_io_u: 0.9689 - val_loss: 0.1664 - val_accuracy: 0.9605 - val_binary_io_u: 0.9174 - lr: 1.2500e-04\n","Epoch 24/100\n","5748/5748 [==============================] - 3436s 598ms/step - loss: 0.0388 - accuracy: 0.9849 - binary_io_u: 0.9691 - val_loss: 0.1671 - val_accuracy: 0.9605 - val_binary_io_u: 0.9173 - lr: 1.2500e-04\n","Epoch 25/100\n","4673/5748 [=======================>......] - ETA: 10:21 - loss: 0.0389 - accuracy: 0.9849 - binary_io_u: 0.9691"]}],"source":["history = model.fit(train_dataset, validation_data=val_dataset,\n","                    callbacks=cb_list, epochs=100)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ogeeV1IRoKgS"},"outputs":[],"source":["plt.plot(history.history[\"loss\"])\n","plt.title(\"Training Loss\")\n","plt.ylabel(\"loss\")\n","plt.xlabel(\"epoch\")\n","plt.plot(history.history[\"val_accuracy\"])\n","plt.ylabel(\"val_accuracy\")\n","plt.xlabel(\"epoch\")\n","plt.show()\n","\n","plt.plot(history.history[\"val_loss\"])\n","plt.title(\"Validation Loss\")\n","plt.ylabel(\"val_loss\")\n","plt.xlabel(\"epoch\")\n","plt.plot(history.history[\"accuracy\"])\n","plt.title(\"Training Accuracy\")\n","plt.ylabel(\"accuracy\")\n","plt.xlabel(\"epoch\")\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IOMteRKlbtfZ"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"collapsed_sections":[],"machine_shape":"hm","name":"DL_v3+unfreeze_adam0.01","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/deeplabv3_plus.ipynb","timestamp":1659321316639}]},"gpuClass":"standard","kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}